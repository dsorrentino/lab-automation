---
- name: Set facts if we are looping through virtual machines
  set_fact:
    servername: "{{ item.servername }}"
    vcpus: "{{ item.vcpus }}"
    ram_mb: "{{ item.ram_mb }}"
    rootfs_gb: "{{ item.rootfs_gb }}"
    network: "{{ item.network }}"
  when: item.servername is defined
- name: Get the shortname of the server to be used for the qcow2 file image. ({{ servername }})
  shell: |
    SHORT_NAME=$(echo {{ servername }} | awk -F. '{print $1}')
    echo "${SHORT_NAME}.qcow2"
  register: server_qcow2
- name: Check if qcow2 file exists already ({{ servername }})
  stat:
    path: /var/lib/libvirt/images/{{ server_qcow2.stdout }}
  register: qcow2_file
- name: Fail if QCOW2 exists ({{ servername }})
  debug:
    msg: "Warning: /var/lib/libvirt/images/{{ server_qcow2.stdout }} exists, will not create VM."
  when: qcow2_file.stat.exists
- block:
    - name: Create QCOW2 image ({{ servername }})
      shell: |
        export LIBGUESTFS_BACKEND=direct
        qemu-img create -f qcow2 /var/lib/libvirt/images/{{ server_qcow2.stdout }} {{ rootfs_gb }}G
        virt-resize --expand {{ source_qcow2.rootfs }} {{ source_qcow2.file }} /var/lib/libvirt/images/{{ server_qcow2.stdout }}
    - name: Create a tempfile to generate the ifcfg file ({{ servername }})
      tempfile:
        state: directory
        path: /tmp
      register: ifcfg_work_directory
    - name: Generate the ifcfg files ({{ servername }})
      include_tasks: generate_ifcfg.yml
      loop: "{{ network }}"
      loop_control:
        index_var: device_id
        loop_var: nic
    - name: Configuring QCOW2 file for KVM and copying in SSH key ({{ servername }})
      shell: |
        export LIBGUESTFS_BACKEND=direct
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --root-password password:{{ root_pw }}
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --run-command 'yum remove cloud-init -y'
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --run-command 'mkdir -m 0700 /root/.ssh'
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --copy-in /root/.ssh/id_rsa.pub:/root/.ssh
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --move /root/.ssh/id_rsa.pub:/root/.ssh/authorized_keys
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --run-command 'chmod 600 /root/.ssh/authorized_keys'
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --touch /.autorelabel
    - name: Copy in ifcfg files
      shell: |
        virt-customize -a /var/lib/libvirt/images/{{ server_qcow2.stdout }} --copy-in {{ ifcfg_work_directory.path }}/ifcfg-eth{{ device_id }}:/etc/sysconfig/network-scripts
        echo "{{ nic.host_bridge }}" >>{{ ifcfg_work_directory.path }}/bridges
      loop: "{{ network }}"
      loop_control:
        index_var: device_id
        loop_var: nic
    - name: Creating VM ({{ servername }})
      shell: |
        NETWORK_PARAMETER=""
        for BRIDGE in $(cat {{ ifcfg_work_directory.path }}/bridges)
        do
          NETWORK_PARAMETER="${NETWORK_PARAMETER} --network bridge=${BRIDGE}"
        done
        virt-install --memory {{ ram_mb }} --vcpus {{ vcpus }} --os-variant {{ source_qcow2.variant }} --disk path=/var/lib/libvirt/images/{{ server_qcow2.stdout }},device=disk,bus=virtio,format=qcow2 --import --noautoconsole --vnc ${NETWORK_PARAMETER} --name {{ servername }}
        exit 0
    - name: Updating VM SSH Keys ({{ servername }})
      shell: |
        IPV4_ADDRESS=$(cat {{ ifcfg_work_directory.path }}/default_ip)
        SHORT_NAME=$(echo {{ servername }} | awk -F. '{print $1}')
        ssh-keygen -R ${IPV4_ADDRESS} 2>/dev/null
        ssh-keygen -R {{ servername }} 2>/dev/null
        ssh-keygen -R ${SHORT_NAME} 2>/dev/null
        RC=1
        TIMEOUT=180
        while [[ ${RC} -ne 0 ]]
        do
          TIMEOUT=$(( ${TIMEOUT} - 5 ))
          if [[ ${TIMEOUT} -le 0 ]]
          then
            echo "TIMEOUT WAITING FOR VM TO START"
            exit 100
          fi
          ping -c1 ${IPV4_ADDRESS} 2>&1 >/dev/null
          RC=$?
          sleep 5
        done
        ssh-keyscan -H ${IPV4_ADDRESS}>>/root/.ssh/known_hosts
        ssh-keyscan -H ${SHORTNAME}>>/root/.ssh/known_hosts
        exit 0
    - name: Configure hostname ({{ servername }})
      shell: |
        IPV4_ADDRESS=$(cat {{ ifcfg_work_directory.path }}/default_ip)
        ssh root@${IPV4_ADDRESS} hostnamectl set-hostname {{ servername }}
    - name: Clean up ifcfg file ({{ servername }})
      file:
        path: "{{ ifcfg_work_directory.path }}"
        state: absent
  when: not qcow2_file.stat.exists
