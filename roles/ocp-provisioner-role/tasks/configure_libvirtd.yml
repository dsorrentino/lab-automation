---
# tasks file for ocp-provisioner-role
- name: Install necessary packages
  yum:
    name: 
      - libvirt
      - qemu-kvm
    state: latest
- name: Start and enable libvirtd
  service:
    name: libvirtd
    enabled: yes
    state: started
- name: Create the default storage pool
  shell: |
    # In order to use community.libvirt.virt_pool, would need to install deps on provisioner
    if [[ -z "$(virsh pool-list | grep ' default ')" ]]
    then
      virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
    fi
    if [[ -z "$(virsh pool-list | grep ' default   active ')" ]]
    then
      virsh pool-start default
    fi
    if [[ -z "$(virsh pool-list | grep ' default   active   yes')" ]]
    then
      virsh pool-autostart default
    fi
- name: Configure "baremetal" bridge
  shell: |
    export NETWORK_CHANGE=false
    export BRIDGE_NAME="{{ install_config.external_bridge }}"
    if [[ -z "${BRIDGE_NAME}" ]]
    then
      BRIDGE_NAME=baremetal
    fi

    if [[ ! -f /etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }} ]]
    then
      echo "ERROR> Missing interface: /etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }}"
      exit 255
    fi

    WORK_FILE=$(mktemp)
    cat /dev/null>${WORK_FILE}
    sed '/^# .*ANSIBLE.*/d;/^NAME=/d;/^BRIDGE=/d;/^UUID=/d;/^STP=/d;s/^#//g;s/^DEVICE=.*/DEVICE=baremetal/g;s/^TYPE=.*/TYPE=Bridge/g' /etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }} >${WORK_FILE}
    echo "NAME=${BRIDGE_NAME}" >>${WORK_FILE}
    echo 'STP=no' >>${WORK_FILE}
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME} ]]
    then
      cat ${WORK_FILE} | sort -u > ${WORK_FILE}.sort1
      cat /etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME} | egrep -v '^UUID=' | sort -u >${WORK_FILE}.sort2
      diff ${WORK_FILE}.sort1 ${WORK_FILE}.sort2
      if [[ $? -ne 0 ]]
      then
        NETWORK_CHANGE=true
      fi
      rm -f ${WORK_FILE}.sort1 ${WORK_FILE}.sort2
    else
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME}

    cat /etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }} >${WORK_FILE}
    sed -i '/^BRIDGE=/d;s/^DNS/#DNS/g;s/^IPADDR=/#IPADDR=/g;s/^PREFIX=/#PREFIX=/g;s/^GATEWAY=/#GATEWAY=/g;s/^DEFROUTE=/#DEFROUTE=/g' ${WORK_FILE}
    echo "BRIDGE=${BRIDGE_NAME}" >>${WORK_FILE}
    diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }} >/dev/null
    if [[ $? -ne 0 ]]
    then
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-{{ configure_host.setting.baremetal_interface }}
    rm -f ${WORK_FILE}
    echo "NETWORK_CHANGE=${NETWORK_CHANGE}"
  register: baremetal_network_change
- name: Configure "provisioning" bridge (Optional)
  shell: |
    export NETWORK_CHANGE=false
    BRIDGE_NAME="{{ install_config.provisioning_bridge }}"

    if [[ -z "${BRIDGE_NAME}" ]]
    then
      BRIDGE_NAME=provisioning
    fi

    if [[ ! -f /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} ]]
    then
      echo "ERROR> Missing interface: /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }}"
      exit 255
    fi

    WORK_FILE=$(mktemp)
    cat /dev/null>${WORK_FILE}
    sed '/^# .*ANSIBLE.*/d;/^NAME=/d;/^BRIDGE=/d;/^UUID=/d;/^STP=/d;s/^#//g;s/^DEVICE=.*/DEVICE=provisioning/g;s/^TYPE=.*/TYPE=Bridge/g' /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >${WORK_FILE}
    echo 'NAME=${BRIDGE_NAME}' >>${WORK_FILE}
    echo 'STP=no' >>${WORK_FILE}
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME} ]]
    then
      cat ${WORK_FILE} | sort -u > ${WORK_FILE}.sort1
      cat /etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME} | egrep -v '^UUID=' | sort -u >${WORK_FILE}.sort2
      diff ${WORK_FILE}.sort1 ${WORK_FILE}.sort2
      if [[ $? -ne 0 ]]
      then
        NETWORK_CHANGE=true
      fi
      rm -f ${WORK_FILE}.sort1 ${WORK_FILE}.sort2
    else
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-${BRIDGE_NAME}

    cat /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >${WORK_FILE}
    sed -i '/^BRIDGE=/d;s/^DNS/#DNS/g;s/^IPADDR=/#IPADDR=/g;s/^PREFIX=/#PREFIX=/g;s/^GATEWAY=/#GATEWAY=/g;s/^DEFROUTE=/#DEFROUTE=/g' ${WORK_FILE}
    echo "BRIDGE=${BRIDGE_NAME}" >>${WORK_FILE}
    diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >/dev/null
    if [[ $? -ne 0 ]]
    then
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }}
    rm -f ${WORK_FILE}
    echo "NETWORK_CHANGE=${NETWORK_CHANGE}"
  when: kni_use_provisioning_network
  register: provisioning_network_change
- name: Reboot if the network changed
  reboot:
  when: baremetal_network_change.stdout == "NETWORK_CHANGE=true" or (kni_use_provisioning_network and provisioning_network_change.stdout == "NETWORK_CHANGE=true")
