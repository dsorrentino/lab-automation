---
# tasks file for ocp-provisioner-role
- name: Install necessary packages
  yum:
    name: "{{ kni_required_packages }}"
    state: latest
- name: Add the kni user
  user:
    name: kni
    comment: OCP Provisioning User
    password: "{{ kni_user_password | password_hash('sha512') }}"
    groups:
      - libvirt
- name: Grant sudo access to kni user
  copy:
    content: "kni ALL=(root) NOPASSWD:ALL"
    dest: /etc/sudoers.d/kni
    owner: root
    group: root
    mode: '0440'
    backup: no
    force: yes
- name: Generate a SSH key for user kni
  shell: |
    if [[ ! -f /home/kni/.ssh/id_rsa ]]
    then
      su - kni -c "ssh-keygen -t ed25519 -f /home/kni/.ssh/id_rsa -N ''"
    fi
- name: Start and enable libvirtd
  service:
    name: libvirtd
    enabled: yes
    state: started
- name: Add http service to firewalld
  ansible.posix.firewalld:
    service: http
    permanent: yes
    immediate: yes
    state: enabled
- name: Create the default storage pool
  shell: |
    # In order to use community.libvirt.virt_pool, would need to install deps on provisioner
    if [[ -z "$(virsh pool-list | grep ' default ')" ]]
    then
      virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
    fi
    if [[ -z "$(virsh pool-list | grep ' default   active ')" ]]
    then
      virsh pool-start default
    fi
    if [[ -z "$(virsh pool-list | grep ' default   active   yes')" ]]
    then
      virsh pool-autostart default
    fi
- name: Configure baremetal bridge
  shell: |
    export NETWORK_CHANGE=false
    if [[ ! -f /etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }} ]]
    then
      echo "ERROR> Missing interface: /etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }}"
      exit 255
    fi

    WORK_FILE=$(mktemp)
    sed '/^# .*ANSIBLE.*/d;/^NAME=/d;/^BRIDGE=/d;s/^#//g;s/^DEVICE=.*/DEVICE=baremetal/g;s/^TYPE=.*/TYPE=Bridge/g' /etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }} >${WORK_FILE}
    echo 'NAME=baremetal' >>${WORK_FILE}
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-baremetal ]]
    then
      diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-baremetal >/dev/null
      if [[ $? -ne 0 ]]
      then
        NETWORK_CHANGE=true
      fi
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-baremetal

    cat /etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }} >${WORK_FILE}
    sed -i '/^BRIDGE=/d;s/^DNS/#DNS/g;s/^IPADDR=/#IPADDR=/g;s/^PREFIX=/#PREFIX=/g;s/^GATEWAY=/#GATEWAY=/g;s/^DEFROUTE=/#DEFROUTE=/g' ${WORK_FILE}
    echo "BRIDGE=baremetal" >>${WORK_FILE}
    diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }} >/dev/null
    if [[ $? -ne 0 ]]
    then
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-{{ kni_baremetal_interface }}
    rm -f ${WORK_FILE}
    echo "NETWORK_CHANGE=${NETWORK_CHANGE}"
  register: baremetal_network_change
- name: Configure provisioning bridge (Optional)
  shell: |
    export NETWORK_CHANGE=false
    if [[ ! -f /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} ]]
    then
      echo "ERROR> Missing interface: /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }}"
      exit 255
    fi

    WORK_FILE=$(mktemp)
    sed '/^# .*ANSIBLE.*/d;/^NAME=/d;/^BRIDGE=/d;s/^#//g;s/^DEVICE=.*/DEVICE=provisioning/g;s/^TYPE=.*/TYPE=Bridge/g' /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >${WORK_FILE}
    echo 'NAME=provisioning' >>${WORK_FILE}
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-provisioning ]]
    then
      diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-provisioning >/dev/null
      if [[ $? -ne 0 ]]
      then
        NETWORK_CHANGE=true
      fi
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-provisioning

    cat /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >${WORK_FILE}
    sed -i '/^BRIDGE=/d;s/^DNS/#DNS/g;s/^IPADDR=/#IPADDR=/g;s/^PREFIX=/#PREFIX=/g;s/^GATEWAY=/#GATEWAY=/g;s/^DEFROUTE=/#DEFROUTE=/g' ${WORK_FILE}
    echo "BRIDGE=provisioning" >>${WORK_FILE}
    diff ${WORK_FILE} /etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }} >/dev/null
    if [[ $? -ne 0 ]]
    then
      NETWORK_CHANGE=true
    fi
    cat ${WORK_FILE} >/etc/sysconfig/network-scripts/ifcfg-{{ kni_provisioning_interface }}
    rm -f ${WORK_FILE}
    echo "NETWORK_CHANGE=${NETWORK_CHANGE}"
  when: kni_use_provisioning_network
  register: provisioning_network_change
- name: Reboot if the network changed
  reboot:
  when: baremetal_network_change.stdout == "NETWORK_CHANGE=true" or (kni_use_provisioning_network and provisioning_network_change.stdout == "NETWORK_CHANGE=true")
