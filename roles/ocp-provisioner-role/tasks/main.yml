---
# tasks file for ocp-provisioner-role
- name: Install necessary packages
  yum:
    name: "{{ kni_required_packages }}"
    state: latest
- name: Configure user - kni
  include_tasks: configure_user_kni.yml
- name: Copy pull secret to kni user
  copy:
    content: "{{ pull_secret }}"
    dest: /home/kni/pull-secret.txt
    owner: kni
    group: kni
    mode: '0600'
    backup: no
    force: yes
- name: Create directory (/home/kni/{{ item }})
  file:
    path: /home/kni/{{ item }}
    state: directory
    mode: '0755'
    owner: kni
    group: kni
  loop:
    - clusterconfigs
    - initialconfigs
    - logs
    - "{{ baremetal_tools }}"
    - "{{ helper_scripts }}"
    - "{{ helper_scripts }}/overrides"
- name: Copy helper scripts to kni user
  copy:
    src: "{{ item }}"
    dest: /home/kni/{{ helper_scripts }}/{{ item }}
    owner: kni
    group: kni
    mode: '0755'
    backup: no
    force: yes
  loop:
    - 02_create_manifests.sh
    - 03_create_ignition.sh
    - 05_create_cluster.sh
    - 99_destroy_cluster.sh
- name: Copy bootstrap fix helper scripts to kni user
  template:
    src: 04_fix_bootstrap_networking.sh.j2
    dest: /home/kni/{{ helper_scripts }}/04_fix_bootstrap_networking.sh
    owner: kni
    group: kni
    mode: '0755'
    backup: no
    force: yes
- name: Copy butane scripts
  template:
    src: "{{ item }}.j2"
    dest: /home/kni/{{ helper_scripts }}/overrides/{{ item }}
    owner: kni
    group: kni
    mode: '0600'
    backup: no
    force: yes
  loop:
    - 99-master-chrony-conf-override.bu
    - 99-worker-chrony-conf-override.bu
    - change_cluster_ntp.sh
- name: Copy change_cluster_ntp.sh script
  template:
    src: change_cluster_ntp.sh.j2
    dest: /home/kni/{{ helper_scripts }}/overrides/change_cluster_ntp.sh
    owner: kni
    group: kni
    mode: '0755'
    backup: no
    force: yes
- name: Create YAML to configure networking components to run on masters
  copy:
    content: |
      apiVersion: machineconfiguration.openshift.io/v1
      kind: MachineConfig
      metadata:
        name: 50-worker-fix-ipi-rwn
        labels:
          machineconfiguration.openshift.io/role: worker
      spec:
        config:
          ignition:
            version: 3.2.0
          storage:
            files:
              - path: /etc/kubernetes/manifests/keepalived.yaml
                mode: 0644
                contents:
                  source: data:,
    dest: /home/kni/{{ helper_scripts }}/overrides/cluster-network-avoid-workers-99-config.yaml
    owner: kni
    group: kni
    mode: '0600'
    backup: no
    force: yes
- name: Create YAML to configure networking components to run on masters
  copy:
    content: |
      apiVersion: operator.openshift.io/v1
      kind: IngressController
      metadata:
        name: default
        namespace: openshift-ingress-operator
      spec:
        nodePlacement:
          nodeSelector:
            matchLabels:
              node-role.kubernetes.io/master: ""
    dest: /home/kni/{{ helper_scripts }}/overrides/cluster-ingress-default-ingresscontroller.yaml 
    owner: kni
    group: kni
    mode: '0600'
    backup: no
    force: yes
- name: Create baremetal tools
  include_tasks: baremetal_tools.yml
- name: Create basic script to retrieve the OpenShift Container Platform installer
  template:
    src: 01_get_openshift.sh.j2
    dest: /home/kni/{{ helper_scripts }}/01_get_openshift.sh
    owner: kni
    group: kni
    mode: '0755'
    backup: no
    force: yes
- name: Get the kni user public key
  slurp:
    src: /home/kni/.ssh/id_rsa.pub
  register: kni_pub_key
- name: Create base install-config.yaml
  template:
    src: install-config.yaml.j2
    dest: /home/kni/{{ item }}/install-config.yaml
    owner: kni
    group: kni
    mode: '0644'
    backup: no
    force: yes
  loop:
    - initialconfigs
    - clusterconfigs
- name: Configure vibvirtd
  include_tasks: configure_libvird.yml
  when: configure_host.boolean.libvirt
- name: Add http service to firewalld
  ansible.posix.firewalld:
    service: http
    permanent: yes
    immediate: yes
    state: enabled
  when: configure_host.boolean.firewalld
